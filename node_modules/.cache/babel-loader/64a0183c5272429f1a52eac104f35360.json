{"ast":null,"code":"var _jsxFileName = \"/Users/suphachabharnigrodhananda/Desktop/4920/4920_project/src/components/Budget/BudgetList.js\";\nimport React, { useContext } from 'react';\nimport { Budget } from './Budget';\nimport { GlobalContext_budget } from '../../context/GlobalState_budget'; // import { GlobalContext } from '../../context/GlobalState';\n\nimport cookie from 'react-cookies';\nimport moment from 'moment';\nimport './Progress.css';\nexport const trackerData = () => {\n  return cookie.load('trackerData');\n};\nexport const BudgetList = () => {\n  const {\n    budgets\n  } = useContext(GlobalContext_budget);\n  const transactions = JSON.parse(localStorage.trackerData);\n  const convertToCurrency = cookie.load('currency');\n  const storage = window.localStorage;\n  const rates = JSON.parse(storage.rates);\n\n  function calculateProgress(budgets, transactions) {\n    var results = [];\n    budgets.forEach(function (b) {\n      results.push(b);\n      results[results.length - 1].Progress = 0;\n      results[results.length - 1].Spent = 0;\n    });\n    transactions.forEach(function (t) {\n      results.forEach(function (b) {\n        if (b.Category.toUpperCase().localeCompare(t.Category.toUpperCase()) === 0 && b.Month === moment(t.Time).format('MMMM')) {\n          var cost = parseFloat(t.Amount).toFixed(2);\n          b.Spent -= cost;\n        }\n      });\n    });\n    results.forEach(function (b) {\n      var newSpent = parseFloat(b.Spent * rates[convertToCurrency]).toFixed(2);\n      var newAmount = parseFloat(b.Amount * rates[convertToCurrency]).toFixed(2);\n      b.Progress = newSpent / newAmount;\n      b.Spent = b.Progress * newAmount; // b.Progress = b.Spent / b.Amount;\n      // b.Spent = b.Progress * b.Amount;\n    });\n    return budgets;\n  }\n\n  ;\n  const budgetsWithProgress = calculateProgress(budgets, transactions);\n\n  function budgetListContent(budgets) {\n    if (budgets.length == 0) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }\n      }, \"There is no budget in this month.\");\n    } else {\n      return budgets.map(budget => {\n        return /*#__PURE__*/React.createElement(Budget, {\n          key: budget._id,\n          budget: budget,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 21\n          }\n        });\n      });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, \"Budgets\"), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, budgetListContent(budgetsWithProgress)));\n};","map":{"version":3,"sources":["/Users/suphachabharnigrodhananda/Desktop/4920/4920_project/src/components/Budget/BudgetList.js"],"names":["React","useContext","Budget","GlobalContext_budget","cookie","moment","trackerData","load","BudgetList","budgets","transactions","JSON","parse","localStorage","convertToCurrency","storage","window","rates","calculateProgress","results","forEach","b","push","length","Progress","Spent","t","Category","toUpperCase","localeCompare","Month","Time","format","cost","parseFloat","Amount","toFixed","newSpent","newAmount","budgetsWithProgress","budgetListContent","map","budget","_id"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport { Budget } from './Budget';\nimport { GlobalContext_budget } from '../../context/GlobalState_budget';\n// import { GlobalContext } from '../../context/GlobalState';\nimport cookie from 'react-cookies'\nimport moment from 'moment';\n\nimport './Progress.css';\n\nexport const trackerData = () => {\n    return cookie.load('trackerData')\n}\n\nexport const BudgetList = () => {\n    const { budgets } = useContext(GlobalContext_budget);\n    const transactions = JSON.parse(localStorage.trackerData);\n\n    const convertToCurrency = cookie.load('currency');\n    const storage = window.localStorage;\n    const rates = JSON.parse(storage.rates);\n\n    function calculateProgress(budgets, transactions) {\n        var results = [];\n\n        budgets.forEach(function (b) {\n            results.push(b);\n            results[results.length - 1].Progress = 0;\n            results[results.length - 1].Spent = 0;\n        });\n\n        transactions.forEach(function (t) {\n            results.forEach(function (b) {\n                if (b.Category.toUpperCase().localeCompare(t.Category.toUpperCase()) === 0 && b.Month === moment(t.Time).format('MMMM')) {\n                    var cost = parseFloat(t.Amount).toFixed(2)\n                    b.Spent -= cost;\n                }\n            });\n        });\n\n        results.forEach(function (b) {\n            var newSpent = parseFloat(b.Spent * rates[convertToCurrency]).toFixed(2);\n            var newAmount = parseFloat(b.Amount * rates[convertToCurrency]).toFixed(2);\n            b.Progress = newSpent / newAmount;\n            b.Spent = b.Progress * newAmount;\n            // b.Progress = b.Spent / b.Amount;\n            // b.Spent = b.Progress * b.Amount;\n        });\n\n        return budgets;\n    };\n\n    const budgetsWithProgress = calculateProgress(budgets, transactions);\n\n    function budgetListContent(budgets) {\n        if (budgets.length == 0) {\n            return (<p>There is no budget in this month.</p>);\n        } else {\n            return (budgets.map(budget => {\n                return (\n                    <Budget key={budget._id} budget={budget} />\n                )\n            }));\n        }\n    }\n\n    return (\n        <>\n            <h3>Budgets</h3>\n            <ul className=\"list\">\n                {budgetListContent(budgetsWithProgress)}\n            </ul>\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}