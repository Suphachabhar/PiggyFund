{"ast":null,"code":"var _jsxFileName = \"/Users/suphachabharnigrodhananda/Desktop/4920/4920_project/src/components/Budget/Chart.js\";\nimport { Doughnut } from 'react-chartjs-2';\nimport { GlobalContext_budget } from '../../context/GlobalState_budget';\nimport { ColourGenerator } from './ColourGenerator';\nimport React, { useContext } from 'react';\nexport const Chart = () => {\n  const {\n    budgets\n  } = useContext(GlobalContext_budget);\n\n  function groupBudgets(budgets) {\n    var groups = {};\n    budgets.forEach(function (i) {\n      if (groups.hasOwnProperty(i.Category)) {\n        groups[i.Category] += i.Amount;\n      } else {\n        groups[i.Category] = i.Amount;\n      }\n    });\n    var result = [];\n\n    for (var g in groups) {\n      result.push({\n        Category: g,\n        Amount: groups[g].toFixed(2)\n      });\n    }\n\n    return result;\n  }\n\n  const grouped = groupBudgets(budgets);\n  const colours = ColourGenerator.getInstance(grouped.length);\n  const state = {\n    labels: grouped.map(b => b.Category),\n    datasets: [{\n      label: 'Budgets',\n      backgroundColor: colours[0],\n      hoverBackgroundColor: colours[1],\n      data: grouped.map(b => b.Amount)\n    }]\n  };\n  const options = {\n    title: {\n      display: true,\n      text: '',\n      fontSize: 20\n    },\n    legend: {\n      display: true,\n      position: 'right'\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Doughnut, {\n    data: state,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/suphachabharnigrodhananda/Desktop/4920/4920_project/src/components/Budget/Chart.js"],"names":["Doughnut","GlobalContext_budget","ColourGenerator","React","useContext","Chart","budgets","groupBudgets","groups","forEach","i","hasOwnProperty","Category","Amount","result","g","push","toFixed","grouped","colours","getInstance","length","state","labels","map","b","datasets","label","backgroundColor","hoverBackgroundColor","data","options","title","display","text","fontSize","legend","position"],"mappings":";AACA,SAAQA,QAAR,QAAuB,iBAAvB;AACA,SAASC,oBAAT,QAAqC,kCAArC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,OAAOC,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,OAAO,MAAMC,KAAK,GAAG,MAAM;AACvB,QAAM;AAAEC,IAAAA;AAAF,MAAcF,UAAU,CAACH,oBAAD,CAA9B;;AAEA,WAASM,YAAT,CAAsBD,OAAtB,EAA+B;AAC3B,QAAIE,MAAM,GAAG,EAAb;AAEAF,IAAAA,OAAO,CAACG,OAAR,CAAgB,UAAUC,CAAV,EAAa;AACzB,UAAIF,MAAM,CAACG,cAAP,CAAsBD,CAAC,CAACE,QAAxB,CAAJ,EAAuC;AACnCJ,QAAAA,MAAM,CAACE,CAAC,CAACE,QAAH,CAAN,IAAsBF,CAAC,CAACG,MAAxB;AACH,OAFD,MAEO;AACHL,QAAAA,MAAM,CAACE,CAAC,CAACE,QAAH,CAAN,GAAqBF,CAAC,CAACG,MAAvB;AACH;AACJ,KAND;AAQA,QAAIC,MAAM,GAAG,EAAb;;AAEA,SAAK,IAAIC,CAAT,IAAcP,MAAd,EAAsB;AAClBM,MAAAA,MAAM,CAACE,IAAP,CAAY;AAAEJ,QAAAA,QAAQ,EAAEG,CAAZ;AAAeF,QAAAA,MAAM,EAAEL,MAAM,CAACO,CAAD,CAAN,CAAUE,OAAV,CAAkB,CAAlB;AAAvB,OAAZ;AACH;;AAED,WAAOH,MAAP;AACH;;AAED,QAAMI,OAAO,GAAGX,YAAY,CAACD,OAAD,CAA5B;AACA,QAAMa,OAAO,GAAGjB,eAAe,CAACkB,WAAhB,CAA4BF,OAAO,CAACG,MAApC,CAAhB;AAEA,QAAMC,KAAK,GAAG;AACdC,IAAAA,MAAM,EAAEL,OAAO,CAACM,GAAR,CAAYC,CAAC,IAAIA,CAAC,CAACb,QAAnB,CADM;AAEdc,IAAAA,QAAQ,EAAE,CACN;AACAC,MAAAA,KAAK,EAAE,SADP;AAEAC,MAAAA,eAAe,EAAET,OAAO,CAAC,CAAD,CAFxB;AAGAU,MAAAA,oBAAoB,EAAEV,OAAO,CAAC,CAAD,CAH7B;AAIAW,MAAAA,IAAI,EAAEZ,OAAO,CAACM,GAAR,CAAYC,CAAC,IAAIA,CAAC,CAACZ,MAAnB;AAJN,KADM;AAFI,GAAd;AAYA,QAAMkB,OAAO,GAAG;AACZC,IAAAA,KAAK,EAAE;AACHC,MAAAA,OAAO,EAAE,IADN;AAEHC,MAAAA,IAAI,EAAC,EAFF;AAGHC,MAAAA,QAAQ,EAAC;AAHN,KADK;AAMZC,IAAAA,MAAM,EAAE;AACJH,MAAAA,OAAO,EAAE,IADL;AAEJI,MAAAA,QAAQ,EAAC;AAFL;AANI,GAAhB;AAYA,sBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,QAAD;AACA,IAAA,IAAI,EAAEf,KADN;AAEA,IAAA,OAAO,EAAES,OAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADA;AAQH,CA1DM","sourcesContent":["\nimport {Doughnut} from 'react-chartjs-2';\nimport { GlobalContext_budget } from '../../context/GlobalState_budget';\nimport { ColourGenerator } from './ColourGenerator';\nimport React, { useContext } from 'react';\n\nexport const Chart = () => {\n    const { budgets } = useContext(GlobalContext_budget);\n\n    function groupBudgets(budgets) {\n        var groups = {};\n\n        budgets.forEach(function (i) {\n            if (groups.hasOwnProperty(i.Category)) {\n                groups[i.Category] += i.Amount;\n            } else {\n                groups[i.Category] = i.Amount;\n            }\n        });\n\n        var result = [];\n\n        for (var g in groups) {\n            result.push({ Category: g, Amount: groups[g].toFixed(2) });\n        }\n\n        return result;\n    }\n\n    const grouped = groupBudgets(budgets);\n    const colours = ColourGenerator.getInstance(grouped.length);\n\n    const state = {\n    labels: grouped.map(b => b.Category),\n    datasets: [\n        {\n        label: 'Budgets',\n        backgroundColor: colours[0],\n        hoverBackgroundColor: colours[1],\n        data: grouped.map(b => b.Amount)\n        }\n    ]\n    }\n\n    const options = {\n        title: {\n            display: true,\n            text:'',\n            fontSize:20\n            },\n        legend: {\n            display: true,\n            position:'right'\n            }\n    }\n\n    return (\n    <h2>\n        <Doughnut\n        data={state}\n        options={options}\n        />\n    </h2>\n    )\n}\n  \n\n"]},"metadata":{},"sourceType":"module"}